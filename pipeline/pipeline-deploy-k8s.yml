shared:

resource_types:

- name: build-metadata
  type: registry-image
  source:
    repository: mastertinner/build-metadata-resource
    tag: latest

- name: kubernetes
  type: registry-image
  source:
    repository: cycloid/kubernetes-resource
    tag: ((k8s_version))

resources:

- name: build-metadata
  type: build-metadata
  icon: settings

- name: image
  type: registry-image
  icon: docker
  source:
    #version: every
    repository: ((registry_image_name))
    tag: ((registry_tag))
    username: ((registry_username))
    password: ((registry_password))
    aws_access_key_id: ((aws_access_key))
    aws_secret_access_key: ((aws_secret_key))
    aws_region: ((aws_region))

- name: git_stack
  type: git
  icon: git
  check_every: 2m
  source:
    uri: https://github.com/cycloid-community-catalog/stack-dockerbuild
    branch: ((stack_git_branch))
    paths:
      - k8s/*

- name: git_config
  type: git
  icon: git
  source:
    uri: ((config_git_repository))
    branch: ((config_git_branch))
    private_key: ((config_git_private_key))
    paths:
      - ((k8s_path))/((k8s_base_path))/*
      - ((k8s_path))/((k8s_env_path))/*

- name: k8s
  type: kubernetes
  icon: kubernetes
  source:
    kubeconfig: ((k8s_kubeconfig))
    namespace: ((k8s_namespace))
    aws_access_key_id: ((aws_access_key))
    aws_secret_access_key: ((aws_secret_key))

jobs:

- name: deploy
  serial: True
  max_in_flight: 1
  build_logs_to_retain: 3
  plan:
  - aggregate:
    - get: git_stack
      trigger: false
    - get: git_config
      trigger: true
    - get: image
      trigger: ((k8s_continuous_deployment))
      passed:
        - build
    - get: build-metadata

  - task: prepare-kustomization
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cycloid/cycloid-toolkit
          tag: latest
      run:
        path: /bin/bash
        args:
        - -c
        - |
          /usr/bin/merge-stack-and-config
  
          # When pushing to ECR, the IMAGE_NAME envvar doesn't contain the full repository name
          if [[ -n "$AWS_ACCESS_KEY_ID" ]]; then
            IMAGE_NAME="$(aws sts get-caller-identity | jq -r .Account).dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME"
          fi
          
          cat <<EOF >> kustomization/kustomization.yaml
          
          bases:
          - $K8S_ENV_PATH

          commonAnnotations:
            cycloid.io/deploy-tags: "$(cat image/tag)"
            cycloid.io/deploy-origin: "console.cycloid.io/organizations/$CUSTOMER/projects/$PROJECT/pipelines/$(cat build-metadata/build-pipeline-name)/jobs/$(cat build-metadata/build-job-name)/builds/$(cat build-metadata/build-id)"
            cycloid.io/deploy-date: "$(date --utc -Iseconds)"
            kubernetes.io/change-cause: "Cycloid $(cat build-metadata/build-pipeline-name) pipeline deploy"
  
          images:
          - name: $IMAGE_NAME
            digest: $(cat image/digest)
          EOF
          echo -e "\n############ Kustomization Preview : kustomization/kustomization.yaml"
          cat kustomization/kustomization.yaml
      inputs:
      - name: git_config
        path: "config"
      - name: git_stack
        path: "stack"
      - name: image
      - name: build-metadata
      outputs:
      - name: kustomization
        path: "kustomization"
    params:
      MERGE_OUTPUT_PATH: kustomization
      CONFIG_PATH: ((k8s_path))
      STACK_PATH: k8s
      IMAGE_NAME: ((registry_image_name))
      AWS_ACCESS_KEY_ID: ((aws_access_key))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_key))
      AWS_REGION: ((aws_region))
      K8S_ENV_PATH: ((k8s_env_path))
      CUSTOMER: ((customer))
      PROJECT: ((project))

  - put: k8s
    params:
      kubectl: |
        apply --kustomize kustomization/
      wait_until_ready_selector: ((k8s_wait_ready_selector))
      wait_until_ready: ((k8s_wait_ready_seconds))
